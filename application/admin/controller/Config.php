<?php
namespace app\admin\controller;

use app\admin\model\Users;
use extend\UploadImg;
use think\Exception;


class Config extends AdminBase
{
    private $config;

    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        $this->config      = model('config');
    }

	//餐厅设置
    public function dining_set()
    {
        if(request()->isAjax()){
            try{
                $data = input();
//                dump($data);die();
                if(empty($data['dining_name']))
                    throw new Exception('餐厅名称不能为空');
                if(empty($data['phone']))
                    throw new Exception('联系方式不能为空');
                if(empty($data['business_hours']))
                    throw new Exception('服务时间不能为空');
                if(empty($data['address']))
                    throw new Exception('详细地址不能为空');
                if(empty($data['dining_desc']))
                    throw new Exception('餐厅介绍不能为空');
                if(empty($data['max_days']))
                    throw new Exception('请填写最长预约天数');
                if(empty($data['room_max']))
                    throw new Exception('包间最大人数');
                if(empty($data['room_min']))
                    throw new Exception('包间最小人数');
                if(empty($data['begin_hour']))
                    throw new Exception('请选择预定开始时间');
                if(empty($data['end_hour']))
                    throw new Exception('请选择预定结束时间');
                if($data['room_max'] < $data['room_min'])
                    throw new Exception('包间最大人数小于最小人数');
                if($data['end_hour'] < $data['begin_hour'])
                    throw new Exception('预定结束时间小于开始时间');


                //餐厅信息
                $dining_info = array(
                    'dining_name'      => $data['dining_name'],
                    'phone'            => $data['phone'],
                    'business_hours'   => $data['business_hours'],
                    'address'          => $data['address'],
                    'dining_desc'      => $data['dining_desc'],
                );

                $dining_old = $this->config->where('config_mark','DINING_SET')->value('config_value');
                $dining_old = unserialize($dining_old);
                if(isset($data['uploadImg'])){
                    //图片删除
                    $dining_old = $this->config->where('config_mark','DINING_SET')->value('config_value');
                    $dining_old = unserialize($dining_old);
                    $image = ROOT_PATH.'/upload'.$dining_old['image'];
                    @unlink($image);
                    if(empty($data['uploadImg']))
                        throw new Exception('上传图片不能为空');
                    $re   = UploadImg::upload("dining_img")->getMsg();
                    $data['image'] = "/dining_img/".$re['info']['image'][0];
                    unset($data['uploadImg']);
                    $dining_info['image'] = $data['image'];
                }else{
                    $dining_info['image'] = $dining_old['image'];
                }
                $value = serialize($dining_info);
                $this->config->where('config_mark','DINING_SET')->update(['config_value'=>$value]);
                //餐厅包厢人数设定
                $room_info = array(
                    'room_max'  => $data['room_max'],
                    'room_min'  => $data['room_min'],
                );
                $room_value = serialize($room_info);
                $this->config->where('config_mark','ROOM_SET')->update(['config_value'=>$room_value]);
                //餐厅预定时间设定
                $time_info = array(
                    'begin_hour' => $data['begin_hour'],
                    'begin_min'   => $data['begin_min'],
                    'end_hour'   => $data['end_hour'],
                    'end_min'     => $data['end_min'],
                );
                $time_value = serialize($time_info);
                $this->config->where('config_mark','TIME_SET')->update(['config_value'=>$time_value]);
                //最长预约时间
                $this->config->where('config_mark','DAY_SET')->update(['config_value'=>intval($data['max_days'])]);

                Api()->setApi('url',0)->ApiSuccess();

            }catch (\Exception $e){
                Api()->setApi('msg',$e->getMessage())->setApi('url',0)->ApiError();
            }
        }
        //餐厅信息
        $dining_info = $this->config->where('config_mark','DINING_SET')->value('config_value');

        //包厢人数限定
        $room_info = $this->config->where('group','room')->order('id')->column('config_value');
//        dump($room_info);die();
        return view(['data'=>unserialize($dining_info),'room_info'=>unserialize($room_info[0]),'time_info'=>unserialize($room_info[2]),'max_day'=>$room_info[1]]);
    }

    //关于我们
    public function about_us()
    {
        if(request()->isAjax()){
            $content = input('content');
            $res = $this->config->where('config_mark','ABOUT_US')->update(['config_value'=>$content]);
            if($res == 1){
                Api()->setApi('msg','更新成功')->ApiSuccess();
            }else{
                Api()->setApi('msg','操作失败')->setApi('url',0)->ApiError();
            }

        }
        //关于我们
        $content = $this->config->where('config_mark','ABOUT_US')->value('config_value');
       return view(['content'=>$content]);
    }
    
    //支付配置
    public function pay_list()
    {
        $configs = $this->config->field('id,config_mark,config_name,config_des,type_value')->where('group','pay')->select();
        return view(['configs'=>$configs]);
    }

    //支付配置设置
    public function pay_edit()
    {
        $id = input('id');
        if(request()->isPost()){
            $data = input();
            if(empty($id))
                Api()->setApi('msg','参数错误')->setApi('url',0)->ApiError();
            unset($data['id']);
            $data = serialize($data);
            $res = $this->config->where('id', $id)->update(['config_value'=>$data]);
            if(empty($res))
                Api()->setApi('msg','操作失败')->setApi('url',0)->ApiError();

            Api()->setApi('url',url('config/pay_list'))->ApiSuccess();
        }

        $config_value = $this->config->where('id',$id)->value('config_value');
        $config_value = unserialize($config_value);
        return view(['config'=>$config_value,'id'=>$id]);
    }

    //禁用/启用支付
    public function pay_status()
    {
        $status = input('status');
        $id = input('id');
        switch ($status){
            case 1:
                $this->config->where('id',$id)->update(['type_value'=>'Y']);
                break;
            case 0:
                $this->config->where('id',$id)->update(['type_value'=>'N']);
        }

        Api()->setApi('url',input('location'))->ApiSuccess();
    }


}