<?php
namespace app\admin\controller;


use app\admin\model\CouponGet;
use think\Exception;
use think\Queue;

class Coupon extends AdminBase
{
    private $coupon,$coupon_log;
    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        $this->coupon     = model('coupon');
        $this->coupon_log = model('CouponLog');
    }

    //优惠券使用记录
    public function coupon_log()
    {
        //所有的使用记录
        $data = input();
        $logs = $this->coupon_log->select_log($data);
        return view(['lists'=>$logs]);
    }

    //优惠券设置s
    public function coupon_add()
    {
        if(request()->isPost()){
            $data = input();
//            dump($data);
            try{
                if(empty($data['money']) || empty($data['count']) || empty($data['out_role']))
                    throw new Exception('请最少填写一张完整优惠信息');
                if(empty($data['valid_start']))
                    throw new Exception('请选择优惠开始时间');
                if(empty($data['valid_end']))
                    throw new Exception('请选择优惠结束时间');

                $valid_start = strtotime($data['valid_start']);
                $valid_end   = strtotime($data['valid_end']);

                $add_data = array();
                foreach ($data['money'] as $key => $value){
                    if( !empty($value) && !empty($data['count'][$key]) && !empty($data['out_role'][$key])){
                        if(empty($data['out_role'][$key]))
                            throw new   Exception('请选择发放规则');
                        if($data['out_role'][$key] !=5 && empty($data['count'][$key]))
                            throw new Exception('不是无限发放券的规则，请输入券的张数');
                        if($data['out_role'][$key] == 5)
                            $data['count'][$key] = 0;
                        $add_data[] = [
                            'money'     => $value,
                            'count'     => $data['count'][$key],
                            'out_role'  => $data['out_role'][$key],
                            'valid_start' => $valid_start,
                            'valid_end' => $valid_end
                        ];

                    }
                }
                $res = $this->coupon->isUpdate(false)->saveAll($add_data);
                resultToArray($res);
                if(!empty($res)){
                    $new_data = array();
                    foreach ( $res as $key => $value){
                        $new_data[$key] = ['type'=>$value['out_role'],'coupon_id'=>$value['id'],'num'=>$value['count'],'valid_start'=>$value['valid_start'],'valid_end'=>$value['valid_end']];
                    }
                    Queue::push('app\admin\job\CouponGive',$new_data,$queue = null);
                }
                Api()->setApi('url',url('coupon_list'))->ApiSuccess();
            }catch (\Exception $e){
                Api()->setApi('msg',$e->getMessage())->setApi('url',0)->ApiError();
            }
        }
        return view();
    }

    //优惠券列表
    public function coupon_list()
    {
        //所有的优惠券
        $data = input();
        $coupons = $this->coupon->select_coupon($data);
        return view(['lists'=>$coupons]);
    }

    //删除
    public function coupon_del()
    {
        try{
            $data = input();
            if(empty($data['id']))
                throw new Exception('请选择要操作数据');
            $time = time();
            //用户信息
            model('coupon')
                ->where('id','in',$data['id'])
                ->update(['delete_time'=>$time]);
            Api()->setApi('url',input('location'))->ApiSuccess();
        }catch(\Exception $e){
            Api()->setApi('msg',$e->getMessage())->setApi('url',0)->ApiError();
        }
    }

    //test
    public function coupon_inc()
    {
//        $data = $this->coupon->order('id')->select();
//        Queue::push('app\admin\job\CouponGive',$data,$queue = null);
//
//        echo 'nice';
        $data = array(
            'type' => 4,
            'coupon_id' => 25,
            'num'   => 5

        );
        $this->fire($data);
    }

    public function fire($data){
//1按消费金额从高到低|2按消费金额从低到高|3按积分从高到低|4按积分从高到低|5无限发放
        switch ($data['type'])
        {
            //按消费金额从高到低
            case 1:
                $member_ids = \app\admin\model\Member::where('total_consumption','>',0)->order('total_consumption desc')->limit($data['num'])->column('id');
                break;
            //按消费金额从低到高
            case 2:
                $member_ids = \app\admin\model\Member::where('total_consumption','>',0)->order('total_consumption')->limit($data['num'])->column('id');
                break;
            //按积分从高到低
            case 3:
                $member_ids = \app\admin\model\Member::where('integral','>',0)->order('integral desc')->limit($data['num'])->column('id');
                break;
            //按积分从低到高
            case 4:
                $member_ids = \app\admin\model\Member::where('integral','>',0)->order('integral')->limit($data['num'])->column('id');
                break;
            //无限发放
            case 5:
                $member_ids = \app\admin\model\Member::column('id');
                break;
        }
//        dump($member_ids);die();
        $add_array = array();
        foreach ($member_ids as $key => $value){
            $add_array[] = ['coupon_id'=> $data['coupon_id'],'member_id'=>$value];
        }
        $model = new CouponGet();

        $model->saveAll($add_array);


    }
}