<?php
namespace app\api\controller;

use app\admin\model\CouponGet;
use app\common\model\Config;
use think\Db;
use think\Exception;
use vendor\alipay\AlipayTradeService;
use vendor\WxPayApi;
use vendor\WxPayUnifiedOrder;
use vendor\WxPayOrderQuery;
/**
 * 支付接口 微信/支付宝
 * @author  wanggang
 * @version 2017/10/10
 */
class Pay extends BaseApi {

    private $order_waitting;

    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub

    }

    public function alipay()
    {
        try {
            $out_trade_no = input('order_sn');
            $subject = input('order_name');
            $total_amount = (float)input('total_money');
            if (empty($out_trade_no) || empty($subject) || empty($total_amount))
                throw new  Exception('参数错误');
            $order_price = \app\admin\model\Order::where('order_sn', $out_trade_no)->value('order_price');
            if ($order_price != $total_amount)
                throw new Exception('订单金额错误');

            $body = '';
            $timeout_express = "1m";
            $config = $this->_get_config('ALI_PAY');

            vendor('alipay.AlipayTradeWapPayContentBuilder');
            $payRequestBuilder = new \AlipayTradeWapPayContentBuilder();
            $payRequestBuilder->setBody($body);
            $payRequestBuilder->setSubject($subject);
            $payRequestBuilder->setOutTradeNo($out_trade_no);
            $payRequestBuilder->setTotalAmount($total_amount);
            $payRequestBuilder->setTimeExpress($timeout_express);

            $payResponse = new AlipayTradeService($config);
            $payResponse->wapPay($payRequestBuilder, $config['return_url'], $config['notify_url']);
            return;
        } catch (\Exception $e) {
            return json([
                'code' => 400,
                'msg' => $e->getMessage()
            ]);
        }
    }

    public function alipay_return_url()
    {
        $arr = input();
        $config = $this->_get_config('ALI_PAY');
        $alipaySevice = new AlipayTradeService($config);
        $result = $alipaySevice->check($arr);
        if ($result) {
            $total_amount = \app\admin\model\Order::where('order_sn', $arr['out_trade_no'])->value('order_price');
            if ($arr['total_amount'] != $total_amount && $arr['app_id'] != $config['app_id']) {
                $this->redirect('http://cy.liesunw.com/api/headlines/My_Order.html');
            }
        } else {
            return json([
                'code' => 400,
                'msg' => '支付信息有误，请联系工作人员'
            ]);
        }
    }

    public function alipay_notify_url(){
        if(request()->isPost()){
            try{
                $arr = input();
                file_put_contents('alinotifyarr.txt',serialize($arr));
                $config      = $this->_get_config('ALI_PAY');
                $alipaySevice = new AlipayTradeService($config);
                $alipaySevice->writeLog(var_export($_POST,true));
                $result = $alipaySevice->check($arr);
                file_put_contents('alinotify1.txt',serialize($result));
                file_put_contents('aliconfig2.txt',serialize($config));
                if(!$result)
                    throw new Exception('fail');
                if($arr['auth_app_id'] != $config['app_id'])
                    throw new Exception('fail');
                $out_trade_no =$arr['out_trade_no'];
                $total_amount = $arr['total_amount'];
                if($arr['trade_status'] == 'TRADE_SUCCESS') {
                    Db::startTrans();
                    $res = $this->deal_order($out_trade_no,$total_amount,1);
                    file_put_contents('alires.txt',serialize($res));
                    if(!$res){
                        throw new Exception('fail');
                    }

                    // 提交事务
                    Db::commit();
                }
                if($arr['trade_status'] == 'TRADE_CLOSED'){
                    file_put_contents('refund.txt','ok');
                    //修改订单状态
                    $res = \app\admin\model\Order::where('order_sn',$out_trade_no)->update(['status'=>13]);
                    if(empty($res))
                        throw new Exception('fail');
                }
                echo 'success';
            }catch (\Exception $e){
                file_put_contents('alinotifyerror.txt',$e->getMessage());
                Db::rollback();
                echo $e->getMessage();
            }
        }
    }

    //微信支付
    public function winxpay(){
//        if(request()->isPost()){
        try{
            $orderSn     = trim(input('order_sn'));
            $total_money = input('total_money');
            $order_name  = input('order_name');
//                if(empty($this->user_id))
//                    return json(apiSessionFail());
            if(empty($orderSn))
                throw new Exception('参数错误');
            if(empty($total_money))
                throw new Exception('参数错误');

            //检查订单金额是否正确
            $order_money = \app\admin\model\Order::where('order_sn',$orderSn)->value('order_price');
            if($total_money != $order_money)
                throw new Exception('订单金额对不上，请联系工作人员');
            $config = $this->_get_config();
            file_put_contents('result0.txt',serialize($config));

            $this->_setPayConfig($config);
            $nonce_str = MD5($orderSn);
            $notify_url = 'http://cy.liesunw.com/api/pay/winxpay_notify';
            vendor('winxpay.JsApiPay');
            $input = new WxPayUnifiedOrder();
            $input->SetBody($order_name);
            $input->SetAppid(APPID);
            $input->SetMch_id(MCHID);
            $input->SetOut_trade_no($orderSn);
            $input->SetNonce_str($nonce_str);
            $input->SetTotal_fee($total_money*100);
            $input->SetNotify_url($notify_url);
            $input->SetTrade_type("MWEB");
            $input->SetSpbill_create_ip($this->_get_client_ip());
            $input->SetScene_info('{"h5_info": {"type":"Wap","wap_url": "https://pay.qq.com","wap_name": "腾讯充值"}}');
            $order = WxPayApi::unifiedOrder($input);
            file_put_contents('wxpay.txt',serialize($order));
            $pay_url = $order['mweb_url'].'&redirect_url='.urlencode('http://cy.liesunw.com/api/pay/url_redirect');
           echo "<a href=".$order['mweb_url'].">支付</a>";
//            $data = array(
//                'pay_url' => $pay_url,
//                'order_sn'=> $orderSn
//            );
//            return json($this->returnData($data));

        }catch (\Exception $e){

            return json($this->returnData($e->getMessage()));
        }
//        }

    }

    /**
     * notify_url接收页面
     */
    public function winxpay_notify(){
        $res = $this->getResult();
        $this->_setPayConfig($this->_get_config());
        if(isset($res["OUT_TRADE_NO"]) && $res["OUT_TRADE_NO"] != ""){
            $transaction_id = trim($res['TRANSACTION_ID']);
            $out_trade_no = trim($res['OUT_TRADE_NO']);
            vendor('winxpay.JsApiPay');
            $input = new WxPayOrderQuery();
            $input->SetTransaction_id($transaction_id);
            $result = WxPayApi::orderQuery($input);
            if($result['trade_state'] == 'SUCCESS'){
                //订单信息验证
                $order_info = \app\admin\model\Order::field('order_id,order_price,order_sn,member_id')
                    ->where(['order_sn'=>$out_trade_no])
                    ->find();
                if(!empty($order_info)){
                    Db::startTrans();
                    $res = $this->deal_order($out_trade_no,$order_info['order_price'],2);
                    file_put_contents('wxpayres4.txt',serialize($res));
                    if(!$res){
                        throw new Exception('fail');
                    }

                    // 提交事务
                    Db::commit();

//                    $this->redirect('http://essj.baogt.com/Phone/headlines/My_Order.html');
                }
            }else{
                echo 'error';
//                $this->redirect('http://essj.baogt.com/Phone/headlines/My_Order.html');
            }
        }

    }

    public function url_redirect()
    {
//        $this->redirect('http://cy.liesunw.com/api/headlines/My_Order.html');
//        $this->redirect('http://www.baidu.com');
        echo 'ok';
    }

    protected function getResult(){
        $result = file_get_contents("php://input");
        $p = xml_parser_create();
        xml_parse_into_struct($p, $result, $vals);
        xml_parser_free($p);
        foreach ($vals as $k => $v) {
            if (strtoupper($v['tag']) != 'XML') {
                $results[$v['tag']] = $v['value'];
            }
        }
        return $results;

    }

    //获取设备ip
    private function _get_client_ip(){
        $cip = "unknown";
        if($_SERVER['REMOTE_ADDR']){
            $cip = $_SERVER['REMOTE_ADDR'];
        }elseif(getenv("REMOTE_ADDR")){
            $cip = getenv("REMOTE_ADDR");
        }
        return $cip;
    }

    //支付常量设置
    private function _setPayConfig($config){
        if(isset($config['mch_id'])){
            define('APPID',$config['app_id']);
            define('MCHID',$config['mch_id']);
            define('KEY',$config['key']);
            define('APPSECRET',$config['app_secret']);
        }
        define('CURL_PROXY_HOST',"0.0.0.0");
        define('CURL_PROXY_PORT',0);
        define('REPORT_LEVENL',1);
    }

    //查询支付配置
    private function _get_config($type ='WX_PAY'){
        $pay_config = Config::where(['config_mark'=>$type])->find()->toArray();
        $configs    = unserialize($pay_config['config_value']);
        $config     = array();
        foreach ($configs as $key => $value) {
            $config[$key] = $value['val'];
        }
        return $config;
    }

    public function deal_order($out_trade_no,$total_amount,$pay_type){
        //订单信息验证
        $order_info = \app\admin\model\Order::field('order_id,order_sn,member_id,order_price,type,status,coupon_get_id')
            ->where(['order_sn'=>$out_trade_no,'order_price'=>$total_amount])
            ->with(['orderInfo'=>function($query){
                $query->field('order_id,goods_id,goods_price,goods_count');
            }])
            ->find();
        if(empty($order_info))
            return false;

        //修改订单状态
        $res_status = \app\admin\model\Order::where(['order_sn'=>$out_trade_no])->update(['status'=>0,'pay_type'=>$pay_type]);
        if(empty($res_status))
            return false;

        //修改商品信息
        if(!empty($order_info->orderInfo)){
            foreach ($order_info->orderInfo as $key =>$value){
                \app\admin\model\Goods::where('goods_id',$value['goods_id'])->setInc('saled_num');
            }
        }

        //订单跟踪
        Db::name('order_tracking')->insertGetId(['order_id'=>$order_info['order_id'],'mark'=>'支付成功']);

        //优惠券改为已用
        CouponGet::where('id',$order_info['coupon_get_id'])->update(['is_used'=>'Y']);


        return true;
    }

}
